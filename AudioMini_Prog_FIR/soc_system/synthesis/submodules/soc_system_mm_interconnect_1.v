// soc_system_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.1 711

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_1 (
		input  wire [11:0] hps_h2f_lw_axi_master_awid,                                        //                                       hps_h2f_lw_axi_master.awid
		input  wire [20:0] hps_h2f_lw_axi_master_awaddr,                                      //                                                            .awaddr
		input  wire [3:0]  hps_h2f_lw_axi_master_awlen,                                       //                                                            .awlen
		input  wire [2:0]  hps_h2f_lw_axi_master_awsize,                                      //                                                            .awsize
		input  wire [1:0]  hps_h2f_lw_axi_master_awburst,                                     //                                                            .awburst
		input  wire [1:0]  hps_h2f_lw_axi_master_awlock,                                      //                                                            .awlock
		input  wire [3:0]  hps_h2f_lw_axi_master_awcache,                                     //                                                            .awcache
		input  wire [2:0]  hps_h2f_lw_axi_master_awprot,                                      //                                                            .awprot
		input  wire        hps_h2f_lw_axi_master_awvalid,                                     //                                                            .awvalid
		output wire        hps_h2f_lw_axi_master_awready,                                     //                                                            .awready
		input  wire [11:0] hps_h2f_lw_axi_master_wid,                                         //                                                            .wid
		input  wire [31:0] hps_h2f_lw_axi_master_wdata,                                       //                                                            .wdata
		input  wire [3:0]  hps_h2f_lw_axi_master_wstrb,                                       //                                                            .wstrb
		input  wire        hps_h2f_lw_axi_master_wlast,                                       //                                                            .wlast
		input  wire        hps_h2f_lw_axi_master_wvalid,                                      //                                                            .wvalid
		output wire        hps_h2f_lw_axi_master_wready,                                      //                                                            .wready
		output wire [11:0] hps_h2f_lw_axi_master_bid,                                         //                                                            .bid
		output wire [1:0]  hps_h2f_lw_axi_master_bresp,                                       //                                                            .bresp
		output wire        hps_h2f_lw_axi_master_bvalid,                                      //                                                            .bvalid
		input  wire        hps_h2f_lw_axi_master_bready,                                      //                                                            .bready
		input  wire [11:0] hps_h2f_lw_axi_master_arid,                                        //                                                            .arid
		input  wire [20:0] hps_h2f_lw_axi_master_araddr,                                      //                                                            .araddr
		input  wire [3:0]  hps_h2f_lw_axi_master_arlen,                                       //                                                            .arlen
		input  wire [2:0]  hps_h2f_lw_axi_master_arsize,                                      //                                                            .arsize
		input  wire [1:0]  hps_h2f_lw_axi_master_arburst,                                     //                                                            .arburst
		input  wire [1:0]  hps_h2f_lw_axi_master_arlock,                                      //                                                            .arlock
		input  wire [3:0]  hps_h2f_lw_axi_master_arcache,                                     //                                                            .arcache
		input  wire [2:0]  hps_h2f_lw_axi_master_arprot,                                      //                                                            .arprot
		input  wire        hps_h2f_lw_axi_master_arvalid,                                     //                                                            .arvalid
		output wire        hps_h2f_lw_axi_master_arready,                                     //                                                            .arready
		output wire [11:0] hps_h2f_lw_axi_master_rid,                                         //                                                            .rid
		output wire [31:0] hps_h2f_lw_axi_master_rdata,                                       //                                                            .rdata
		output wire [1:0]  hps_h2f_lw_axi_master_rresp,                                       //                                                            .rresp
		output wire        hps_h2f_lw_axi_master_rlast,                                       //                                                            .rlast
		output wire        hps_h2f_lw_axi_master_rvalid,                                      //                                                            .rvalid
		input  wire        hps_h2f_lw_axi_master_rready,                                      //                                                            .rready
		input  wire        clk_hps_clk_clk,                                                   //                                                 clk_hps_clk.clk
		input  wire        PLL_using_AD1939_MCLK_outclk0_clk,                                 //                               PLL_using_AD1939_MCLK_outclk0.clk
		input  wire        hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        jtag_uart_reset_reset_bridge_in_reset_reset,                       //                       jtag_uart_reset_reset_bridge_in_reset.reset
		input  wire        master_0_clk_reset_reset_bridge_in_reset_reset,                    //                    master_0_clk_reset_reset_bridge_in_reset.reset
		input  wire        pFIR_Testing_0_reset_reset_bridge_in_reset_reset,                  //                  pFIR_Testing_0_reset_reset_bridge_in_reset.reset
		input  wire        SystemID_reset_reset_bridge_in_reset_reset,                        //                        SystemID_reset_reset_bridge_in_reset.reset
		input  wire [31:0] master_0_master_address,                                           //                                             master_0_master.address
		output wire        master_0_master_waitrequest,                                       //                                                            .waitrequest
		input  wire [3:0]  master_0_master_byteenable,                                        //                                                            .byteenable
		input  wire        master_0_master_read,                                              //                                                            .read
		output wire [31:0] master_0_master_readdata,                                          //                                                            .readdata
		output wire        master_0_master_readdatavalid,                                     //                                                            .readdatavalid
		input  wire        master_0_master_write,                                             //                                                            .write
		input  wire [31:0] master_0_master_writedata,                                         //                                                            .writedata
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                               //                                 jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                                 //                                                            .write
		output wire        jtag_uart_avalon_jtag_slave_read,                                  //                                                            .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                              //                                                            .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,                             //                                                            .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,                           //                                                            .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,                            //                                                            .chipselect
		output wire [0:0]  pFIR_Testing_0_avalon_slave_0_address,                             //                               pFIR_Testing_0_avalon_slave_0.address
		output wire        pFIR_Testing_0_avalon_slave_0_write,                               //                                                            .write
		output wire        pFIR_Testing_0_avalon_slave_0_read,                                //                                                            .read
		input  wire [31:0] pFIR_Testing_0_avalon_slave_0_readdata,                            //                                                            .readdata
		output wire [31:0] pFIR_Testing_0_avalon_slave_0_writedata,                           //                                                            .writedata
		output wire [8:0]  pFIR_Testing_0_avalon_slave_1_address,                             //                               pFIR_Testing_0_avalon_slave_1.address
		output wire        pFIR_Testing_0_avalon_slave_1_write,                               //                                                            .write
		output wire        pFIR_Testing_0_avalon_slave_1_read,                                //                                                            .read
		input  wire [31:0] pFIR_Testing_0_avalon_slave_1_readdata,                            //                                                            .readdata
		output wire [31:0] pFIR_Testing_0_avalon_slave_1_writedata,                           //                                                            .writedata
		output wire [0:0]  SystemID_control_slave_address,                                    //                                      SystemID_control_slave.address
		input  wire [31:0] SystemID_control_slave_readdata                                    //                                                            .readdata
	);

	wire          master_0_master_translator_avalon_universal_master_0_waitrequest;   // master_0_master_agent:av_waitrequest -> master_0_master_translator:uav_waitrequest
	wire   [31:0] master_0_master_translator_avalon_universal_master_0_readdata;      // master_0_master_agent:av_readdata -> master_0_master_translator:uav_readdata
	wire          master_0_master_translator_avalon_universal_master_0_debugaccess;   // master_0_master_translator:uav_debugaccess -> master_0_master_agent:av_debugaccess
	wire   [31:0] master_0_master_translator_avalon_universal_master_0_address;       // master_0_master_translator:uav_address -> master_0_master_agent:av_address
	wire          master_0_master_translator_avalon_universal_master_0_read;          // master_0_master_translator:uav_read -> master_0_master_agent:av_read
	wire    [3:0] master_0_master_translator_avalon_universal_master_0_byteenable;    // master_0_master_translator:uav_byteenable -> master_0_master_agent:av_byteenable
	wire          master_0_master_translator_avalon_universal_master_0_readdatavalid; // master_0_master_agent:av_readdatavalid -> master_0_master_translator:uav_readdatavalid
	wire          master_0_master_translator_avalon_universal_master_0_lock;          // master_0_master_translator:uav_lock -> master_0_master_agent:av_lock
	wire          master_0_master_translator_avalon_universal_master_0_write;         // master_0_master_translator:uav_write -> master_0_master_agent:av_write
	wire   [31:0] master_0_master_translator_avalon_universal_master_0_writedata;     // master_0_master_translator:uav_writedata -> master_0_master_agent:av_writedata
	wire    [2:0] master_0_master_translator_avalon_universal_master_0_burstcount;    // master_0_master_translator:uav_burstcount -> master_0_master_agent:av_burstcount
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                      // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                   // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                   // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                       // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                    // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                          // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                 // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                          // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                     // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                         // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                    // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                  // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [125:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                   // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                  // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;          // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;            // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;               // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [125:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;               // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;       // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;         // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;             // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;              // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;             // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire   [31:0] pfir_testing_0_avalon_slave_0_agent_m0_readdata;                    // pFIR_Testing_0_avalon_slave_0_translator:uav_readdata -> pFIR_Testing_0_avalon_slave_0_agent:m0_readdata
	wire          pfir_testing_0_avalon_slave_0_agent_m0_waitrequest;                 // pFIR_Testing_0_avalon_slave_0_translator:uav_waitrequest -> pFIR_Testing_0_avalon_slave_0_agent:m0_waitrequest
	wire          pfir_testing_0_avalon_slave_0_agent_m0_debugaccess;                 // pFIR_Testing_0_avalon_slave_0_agent:m0_debugaccess -> pFIR_Testing_0_avalon_slave_0_translator:uav_debugaccess
	wire   [31:0] pfir_testing_0_avalon_slave_0_agent_m0_address;                     // pFIR_Testing_0_avalon_slave_0_agent:m0_address -> pFIR_Testing_0_avalon_slave_0_translator:uav_address
	wire    [3:0] pfir_testing_0_avalon_slave_0_agent_m0_byteenable;                  // pFIR_Testing_0_avalon_slave_0_agent:m0_byteenable -> pFIR_Testing_0_avalon_slave_0_translator:uav_byteenable
	wire          pfir_testing_0_avalon_slave_0_agent_m0_read;                        // pFIR_Testing_0_avalon_slave_0_agent:m0_read -> pFIR_Testing_0_avalon_slave_0_translator:uav_read
	wire          pfir_testing_0_avalon_slave_0_agent_m0_readdatavalid;               // pFIR_Testing_0_avalon_slave_0_translator:uav_readdatavalid -> pFIR_Testing_0_avalon_slave_0_agent:m0_readdatavalid
	wire          pfir_testing_0_avalon_slave_0_agent_m0_lock;                        // pFIR_Testing_0_avalon_slave_0_agent:m0_lock -> pFIR_Testing_0_avalon_slave_0_translator:uav_lock
	wire   [31:0] pfir_testing_0_avalon_slave_0_agent_m0_writedata;                   // pFIR_Testing_0_avalon_slave_0_agent:m0_writedata -> pFIR_Testing_0_avalon_slave_0_translator:uav_writedata
	wire          pfir_testing_0_avalon_slave_0_agent_m0_write;                       // pFIR_Testing_0_avalon_slave_0_agent:m0_write -> pFIR_Testing_0_avalon_slave_0_translator:uav_write
	wire    [2:0] pfir_testing_0_avalon_slave_0_agent_m0_burstcount;                  // pFIR_Testing_0_avalon_slave_0_agent:m0_burstcount -> pFIR_Testing_0_avalon_slave_0_translator:uav_burstcount
	wire          pfir_testing_0_avalon_slave_0_agent_rf_source_valid;                // pFIR_Testing_0_avalon_slave_0_agent:rf_source_valid -> pFIR_Testing_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [125:0] pfir_testing_0_avalon_slave_0_agent_rf_source_data;                 // pFIR_Testing_0_avalon_slave_0_agent:rf_source_data -> pFIR_Testing_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          pfir_testing_0_avalon_slave_0_agent_rf_source_ready;                // pFIR_Testing_0_avalon_slave_0_agent_rsp_fifo:in_ready -> pFIR_Testing_0_avalon_slave_0_agent:rf_source_ready
	wire          pfir_testing_0_avalon_slave_0_agent_rf_source_startofpacket;        // pFIR_Testing_0_avalon_slave_0_agent:rf_source_startofpacket -> pFIR_Testing_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          pfir_testing_0_avalon_slave_0_agent_rf_source_endofpacket;          // pFIR_Testing_0_avalon_slave_0_agent:rf_source_endofpacket -> pFIR_Testing_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          pfir_testing_0_avalon_slave_0_agent_rsp_fifo_out_valid;             // pFIR_Testing_0_avalon_slave_0_agent_rsp_fifo:out_valid -> pFIR_Testing_0_avalon_slave_0_agent:rf_sink_valid
	wire  [125:0] pfir_testing_0_avalon_slave_0_agent_rsp_fifo_out_data;              // pFIR_Testing_0_avalon_slave_0_agent_rsp_fifo:out_data -> pFIR_Testing_0_avalon_slave_0_agent:rf_sink_data
	wire          pfir_testing_0_avalon_slave_0_agent_rsp_fifo_out_ready;             // pFIR_Testing_0_avalon_slave_0_agent:rf_sink_ready -> pFIR_Testing_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          pfir_testing_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;     // pFIR_Testing_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> pFIR_Testing_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          pfir_testing_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;       // pFIR_Testing_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> pFIR_Testing_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          pfir_testing_0_avalon_slave_0_agent_rdata_fifo_src_valid;           // pFIR_Testing_0_avalon_slave_0_agent:rdata_fifo_src_valid -> pFIR_Testing_0_avalon_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] pfir_testing_0_avalon_slave_0_agent_rdata_fifo_src_data;            // pFIR_Testing_0_avalon_slave_0_agent:rdata_fifo_src_data -> pFIR_Testing_0_avalon_slave_0_agent_rdata_fifo:in_data
	wire          pfir_testing_0_avalon_slave_0_agent_rdata_fifo_src_ready;           // pFIR_Testing_0_avalon_slave_0_agent_rdata_fifo:in_ready -> pFIR_Testing_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] pfir_testing_0_avalon_slave_1_agent_m0_readdata;                    // pFIR_Testing_0_avalon_slave_1_translator:uav_readdata -> pFIR_Testing_0_avalon_slave_1_agent:m0_readdata
	wire          pfir_testing_0_avalon_slave_1_agent_m0_waitrequest;                 // pFIR_Testing_0_avalon_slave_1_translator:uav_waitrequest -> pFIR_Testing_0_avalon_slave_1_agent:m0_waitrequest
	wire          pfir_testing_0_avalon_slave_1_agent_m0_debugaccess;                 // pFIR_Testing_0_avalon_slave_1_agent:m0_debugaccess -> pFIR_Testing_0_avalon_slave_1_translator:uav_debugaccess
	wire   [31:0] pfir_testing_0_avalon_slave_1_agent_m0_address;                     // pFIR_Testing_0_avalon_slave_1_agent:m0_address -> pFIR_Testing_0_avalon_slave_1_translator:uav_address
	wire    [3:0] pfir_testing_0_avalon_slave_1_agent_m0_byteenable;                  // pFIR_Testing_0_avalon_slave_1_agent:m0_byteenable -> pFIR_Testing_0_avalon_slave_1_translator:uav_byteenable
	wire          pfir_testing_0_avalon_slave_1_agent_m0_read;                        // pFIR_Testing_0_avalon_slave_1_agent:m0_read -> pFIR_Testing_0_avalon_slave_1_translator:uav_read
	wire          pfir_testing_0_avalon_slave_1_agent_m0_readdatavalid;               // pFIR_Testing_0_avalon_slave_1_translator:uav_readdatavalid -> pFIR_Testing_0_avalon_slave_1_agent:m0_readdatavalid
	wire          pfir_testing_0_avalon_slave_1_agent_m0_lock;                        // pFIR_Testing_0_avalon_slave_1_agent:m0_lock -> pFIR_Testing_0_avalon_slave_1_translator:uav_lock
	wire   [31:0] pfir_testing_0_avalon_slave_1_agent_m0_writedata;                   // pFIR_Testing_0_avalon_slave_1_agent:m0_writedata -> pFIR_Testing_0_avalon_slave_1_translator:uav_writedata
	wire          pfir_testing_0_avalon_slave_1_agent_m0_write;                       // pFIR_Testing_0_avalon_slave_1_agent:m0_write -> pFIR_Testing_0_avalon_slave_1_translator:uav_write
	wire    [2:0] pfir_testing_0_avalon_slave_1_agent_m0_burstcount;                  // pFIR_Testing_0_avalon_slave_1_agent:m0_burstcount -> pFIR_Testing_0_avalon_slave_1_translator:uav_burstcount
	wire          pfir_testing_0_avalon_slave_1_agent_rf_source_valid;                // pFIR_Testing_0_avalon_slave_1_agent:rf_source_valid -> pFIR_Testing_0_avalon_slave_1_agent_rsp_fifo:in_valid
	wire  [125:0] pfir_testing_0_avalon_slave_1_agent_rf_source_data;                 // pFIR_Testing_0_avalon_slave_1_agent:rf_source_data -> pFIR_Testing_0_avalon_slave_1_agent_rsp_fifo:in_data
	wire          pfir_testing_0_avalon_slave_1_agent_rf_source_ready;                // pFIR_Testing_0_avalon_slave_1_agent_rsp_fifo:in_ready -> pFIR_Testing_0_avalon_slave_1_agent:rf_source_ready
	wire          pfir_testing_0_avalon_slave_1_agent_rf_source_startofpacket;        // pFIR_Testing_0_avalon_slave_1_agent:rf_source_startofpacket -> pFIR_Testing_0_avalon_slave_1_agent_rsp_fifo:in_startofpacket
	wire          pfir_testing_0_avalon_slave_1_agent_rf_source_endofpacket;          // pFIR_Testing_0_avalon_slave_1_agent:rf_source_endofpacket -> pFIR_Testing_0_avalon_slave_1_agent_rsp_fifo:in_endofpacket
	wire          pfir_testing_0_avalon_slave_1_agent_rsp_fifo_out_valid;             // pFIR_Testing_0_avalon_slave_1_agent_rsp_fifo:out_valid -> pFIR_Testing_0_avalon_slave_1_agent:rf_sink_valid
	wire  [125:0] pfir_testing_0_avalon_slave_1_agent_rsp_fifo_out_data;              // pFIR_Testing_0_avalon_slave_1_agent_rsp_fifo:out_data -> pFIR_Testing_0_avalon_slave_1_agent:rf_sink_data
	wire          pfir_testing_0_avalon_slave_1_agent_rsp_fifo_out_ready;             // pFIR_Testing_0_avalon_slave_1_agent:rf_sink_ready -> pFIR_Testing_0_avalon_slave_1_agent_rsp_fifo:out_ready
	wire          pfir_testing_0_avalon_slave_1_agent_rsp_fifo_out_startofpacket;     // pFIR_Testing_0_avalon_slave_1_agent_rsp_fifo:out_startofpacket -> pFIR_Testing_0_avalon_slave_1_agent:rf_sink_startofpacket
	wire          pfir_testing_0_avalon_slave_1_agent_rsp_fifo_out_endofpacket;       // pFIR_Testing_0_avalon_slave_1_agent_rsp_fifo:out_endofpacket -> pFIR_Testing_0_avalon_slave_1_agent:rf_sink_endofpacket
	wire          pfir_testing_0_avalon_slave_1_agent_rdata_fifo_src_valid;           // pFIR_Testing_0_avalon_slave_1_agent:rdata_fifo_src_valid -> pFIR_Testing_0_avalon_slave_1_agent_rdata_fifo:in_valid
	wire   [33:0] pfir_testing_0_avalon_slave_1_agent_rdata_fifo_src_data;            // pFIR_Testing_0_avalon_slave_1_agent:rdata_fifo_src_data -> pFIR_Testing_0_avalon_slave_1_agent_rdata_fifo:in_data
	wire          pfir_testing_0_avalon_slave_1_agent_rdata_fifo_src_ready;           // pFIR_Testing_0_avalon_slave_1_agent_rdata_fifo:in_ready -> pFIR_Testing_0_avalon_slave_1_agent:rdata_fifo_src_ready
	wire   [31:0] systemid_control_slave_agent_m0_readdata;                           // SystemID_control_slave_translator:uav_readdata -> SystemID_control_slave_agent:m0_readdata
	wire          systemid_control_slave_agent_m0_waitrequest;                        // SystemID_control_slave_translator:uav_waitrequest -> SystemID_control_slave_agent:m0_waitrequest
	wire          systemid_control_slave_agent_m0_debugaccess;                        // SystemID_control_slave_agent:m0_debugaccess -> SystemID_control_slave_translator:uav_debugaccess
	wire   [31:0] systemid_control_slave_agent_m0_address;                            // SystemID_control_slave_agent:m0_address -> SystemID_control_slave_translator:uav_address
	wire    [3:0] systemid_control_slave_agent_m0_byteenable;                         // SystemID_control_slave_agent:m0_byteenable -> SystemID_control_slave_translator:uav_byteenable
	wire          systemid_control_slave_agent_m0_read;                               // SystemID_control_slave_agent:m0_read -> SystemID_control_slave_translator:uav_read
	wire          systemid_control_slave_agent_m0_readdatavalid;                      // SystemID_control_slave_translator:uav_readdatavalid -> SystemID_control_slave_agent:m0_readdatavalid
	wire          systemid_control_slave_agent_m0_lock;                               // SystemID_control_slave_agent:m0_lock -> SystemID_control_slave_translator:uav_lock
	wire   [31:0] systemid_control_slave_agent_m0_writedata;                          // SystemID_control_slave_agent:m0_writedata -> SystemID_control_slave_translator:uav_writedata
	wire          systemid_control_slave_agent_m0_write;                              // SystemID_control_slave_agent:m0_write -> SystemID_control_slave_translator:uav_write
	wire    [2:0] systemid_control_slave_agent_m0_burstcount;                         // SystemID_control_slave_agent:m0_burstcount -> SystemID_control_slave_translator:uav_burstcount
	wire          systemid_control_slave_agent_rf_source_valid;                       // SystemID_control_slave_agent:rf_source_valid -> SystemID_control_slave_agent_rsp_fifo:in_valid
	wire  [125:0] systemid_control_slave_agent_rf_source_data;                        // SystemID_control_slave_agent:rf_source_data -> SystemID_control_slave_agent_rsp_fifo:in_data
	wire          systemid_control_slave_agent_rf_source_ready;                       // SystemID_control_slave_agent_rsp_fifo:in_ready -> SystemID_control_slave_agent:rf_source_ready
	wire          systemid_control_slave_agent_rf_source_startofpacket;               // SystemID_control_slave_agent:rf_source_startofpacket -> SystemID_control_slave_agent_rsp_fifo:in_startofpacket
	wire          systemid_control_slave_agent_rf_source_endofpacket;                 // SystemID_control_slave_agent:rf_source_endofpacket -> SystemID_control_slave_agent_rsp_fifo:in_endofpacket
	wire          systemid_control_slave_agent_rsp_fifo_out_valid;                    // SystemID_control_slave_agent_rsp_fifo:out_valid -> SystemID_control_slave_agent:rf_sink_valid
	wire  [125:0] systemid_control_slave_agent_rsp_fifo_out_data;                     // SystemID_control_slave_agent_rsp_fifo:out_data -> SystemID_control_slave_agent:rf_sink_data
	wire          systemid_control_slave_agent_rsp_fifo_out_ready;                    // SystemID_control_slave_agent:rf_sink_ready -> SystemID_control_slave_agent_rsp_fifo:out_ready
	wire          systemid_control_slave_agent_rsp_fifo_out_startofpacket;            // SystemID_control_slave_agent_rsp_fifo:out_startofpacket -> SystemID_control_slave_agent:rf_sink_startofpacket
	wire          systemid_control_slave_agent_rsp_fifo_out_endofpacket;              // SystemID_control_slave_agent_rsp_fifo:out_endofpacket -> SystemID_control_slave_agent:rf_sink_endofpacket
	wire          systemid_control_slave_agent_rdata_fifo_src_valid;                  // SystemID_control_slave_agent:rdata_fifo_src_valid -> SystemID_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] systemid_control_slave_agent_rdata_fifo_src_data;                   // SystemID_control_slave_agent:rdata_fifo_src_data -> SystemID_control_slave_agent_rdata_fifo:in_data
	wire          systemid_control_slave_agent_rdata_fifo_src_ready;                  // SystemID_control_slave_agent_rdata_fifo:in_ready -> SystemID_control_slave_agent:rdata_fifo_src_ready
	wire          hps_h2f_lw_axi_master_agent_write_cp_valid;                         // hps_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [124:0] hps_h2f_lw_axi_master_agent_write_cp_data;                          // hps_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_h2f_lw_axi_master_agent_write_cp_ready;                         // router:sink_ready -> hps_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_h2f_lw_axi_master_agent_write_cp_startofpacket;                 // hps_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_h2f_lw_axi_master_agent_write_cp_endofpacket;                   // hps_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_h2f_lw_axi_master_agent_read_cp_valid;                          // hps_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [124:0] hps_h2f_lw_axi_master_agent_read_cp_data;                           // hps_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_h2f_lw_axi_master_agent_read_cp_ready;                          // router_001:sink_ready -> hps_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_h2f_lw_axi_master_agent_read_cp_startofpacket;                  // hps_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_h2f_lw_axi_master_agent_read_cp_endofpacket;                    // hps_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          master_0_master_agent_cp_valid;                                     // master_0_master_agent:cp_valid -> router_002:sink_valid
	wire  [124:0] master_0_master_agent_cp_data;                                      // master_0_master_agent:cp_data -> router_002:sink_data
	wire          master_0_master_agent_cp_ready;                                     // router_002:sink_ready -> master_0_master_agent:cp_ready
	wire          master_0_master_agent_cp_startofpacket;                             // master_0_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          master_0_master_agent_cp_endofpacket;                               // master_0_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                         // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_003:sink_valid
	wire  [124:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                          // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_003:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                         // router_003:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                 // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                   // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                               // router_003:src_valid -> rsp_demux:sink_valid
	wire  [124:0] router_003_src_data;                                                // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                               // rsp_demux:sink_ready -> router_003:src_ready
	wire    [3:0] router_003_src_channel;                                             // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                       // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                         // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          pfir_testing_0_avalon_slave_0_agent_rp_valid;                       // pFIR_Testing_0_avalon_slave_0_agent:rp_valid -> router_004:sink_valid
	wire  [124:0] pfir_testing_0_avalon_slave_0_agent_rp_data;                        // pFIR_Testing_0_avalon_slave_0_agent:rp_data -> router_004:sink_data
	wire          pfir_testing_0_avalon_slave_0_agent_rp_ready;                       // router_004:sink_ready -> pFIR_Testing_0_avalon_slave_0_agent:rp_ready
	wire          pfir_testing_0_avalon_slave_0_agent_rp_startofpacket;               // pFIR_Testing_0_avalon_slave_0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          pfir_testing_0_avalon_slave_0_agent_rp_endofpacket;                 // pFIR_Testing_0_avalon_slave_0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                               // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [124:0] router_004_src_data;                                                // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                               // rsp_demux_001:sink_ready -> router_004:src_ready
	wire    [3:0] router_004_src_channel;                                             // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                       // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                         // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          pfir_testing_0_avalon_slave_1_agent_rp_valid;                       // pFIR_Testing_0_avalon_slave_1_agent:rp_valid -> router_005:sink_valid
	wire  [124:0] pfir_testing_0_avalon_slave_1_agent_rp_data;                        // pFIR_Testing_0_avalon_slave_1_agent:rp_data -> router_005:sink_data
	wire          pfir_testing_0_avalon_slave_1_agent_rp_ready;                       // router_005:sink_ready -> pFIR_Testing_0_avalon_slave_1_agent:rp_ready
	wire          pfir_testing_0_avalon_slave_1_agent_rp_startofpacket;               // pFIR_Testing_0_avalon_slave_1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          pfir_testing_0_avalon_slave_1_agent_rp_endofpacket;                 // pFIR_Testing_0_avalon_slave_1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                               // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [124:0] router_005_src_data;                                                // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                               // rsp_demux_002:sink_ready -> router_005:src_ready
	wire    [3:0] router_005_src_channel;                                             // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                       // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                         // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          systemid_control_slave_agent_rp_valid;                              // SystemID_control_slave_agent:rp_valid -> router_006:sink_valid
	wire  [124:0] systemid_control_slave_agent_rp_data;                               // SystemID_control_slave_agent:rp_data -> router_006:sink_data
	wire          systemid_control_slave_agent_rp_ready;                              // router_006:sink_ready -> SystemID_control_slave_agent:rp_ready
	wire          systemid_control_slave_agent_rp_startofpacket;                      // SystemID_control_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          systemid_control_slave_agent_rp_endofpacket;                        // SystemID_control_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                               // router_006:src_valid -> rsp_demux_003:sink_valid
	wire  [124:0] router_006_src_data;                                                // router_006:src_data -> rsp_demux_003:sink_data
	wire          router_006_src_ready;                                               // rsp_demux_003:sink_ready -> router_006:src_ready
	wire    [3:0] router_006_src_channel;                                             // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_startofpacket;                                       // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_006_src_endofpacket;                                         // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_src_valid;                                                   // router:src_valid -> hps_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [124:0] router_src_data;                                                    // router:src_data -> hps_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                   // hps_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [3:0] router_src_channel;                                                 // router:src_channel -> hps_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                           // router:src_startofpacket -> hps_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                             // router:src_endofpacket -> hps_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [124:0] hps_h2f_lw_axi_master_wr_limiter_cmd_src_data;                      // hps_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                     // cmd_demux:sink_ready -> hps_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire    [3:0] hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                   // hps_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;             // hps_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;               // hps_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                  // rsp_mux:src_valid -> hps_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [124:0] rsp_mux_src_data;                                                   // rsp_mux:src_data -> hps_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                  // hps_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [3:0] rsp_mux_src_channel;                                                // rsp_mux:src_channel -> hps_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                          // rsp_mux:src_startofpacket -> hps_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                            // rsp_mux:src_endofpacket -> hps_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                     // hps_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_h2f_lw_axi_master_agent:write_rp_valid
	wire  [124:0] hps_h2f_lw_axi_master_wr_limiter_rsp_src_data;                      // hps_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                     // hps_h2f_lw_axi_master_agent:write_rp_ready -> hps_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire    [3:0] hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                   // hps_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;             // hps_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;               // hps_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                               // router_001:src_valid -> hps_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [124:0] router_001_src_data;                                                // router_001:src_data -> hps_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                               // hps_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [3:0] router_001_src_channel;                                             // router_001:src_channel -> hps_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                       // router_001:src_startofpacket -> hps_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                         // router_001:src_endofpacket -> hps_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [124:0] hps_h2f_lw_axi_master_rd_limiter_cmd_src_data;                      // hps_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                     // cmd_demux_001:sink_ready -> hps_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire    [3:0] hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                   // hps_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;             // hps_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;               // hps_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                              // rsp_mux_001:src_valid -> hps_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [124:0] rsp_mux_001_src_data;                                               // rsp_mux_001:src_data -> hps_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                              // hps_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [3:0] rsp_mux_001_src_channel;                                            // rsp_mux_001:src_channel -> hps_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                      // rsp_mux_001:src_startofpacket -> hps_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                        // rsp_mux_001:src_endofpacket -> hps_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                     // hps_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_h2f_lw_axi_master_agent:read_rp_valid
	wire  [124:0] hps_h2f_lw_axi_master_rd_limiter_rsp_src_data;                      // hps_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                     // hps_h2f_lw_axi_master_agent:read_rp_ready -> hps_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire    [3:0] hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                   // hps_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;             // hps_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;               // hps_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          router_002_src_valid;                                               // router_002:src_valid -> master_0_master_limiter:cmd_sink_valid
	wire  [124:0] router_002_src_data;                                                // router_002:src_data -> master_0_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                               // master_0_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire    [3:0] router_002_src_channel;                                             // router_002:src_channel -> master_0_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                       // router_002:src_startofpacket -> master_0_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                         // router_002:src_endofpacket -> master_0_master_limiter:cmd_sink_endofpacket
	wire  [124:0] master_0_master_limiter_cmd_src_data;                               // master_0_master_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          master_0_master_limiter_cmd_src_ready;                              // cmd_demux_002:sink_ready -> master_0_master_limiter:cmd_src_ready
	wire    [3:0] master_0_master_limiter_cmd_src_channel;                            // master_0_master_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          master_0_master_limiter_cmd_src_startofpacket;                      // master_0_master_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          master_0_master_limiter_cmd_src_endofpacket;                        // master_0_master_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                              // rsp_mux_002:src_valid -> master_0_master_limiter:rsp_sink_valid
	wire  [124:0] rsp_mux_002_src_data;                                               // rsp_mux_002:src_data -> master_0_master_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                              // master_0_master_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire    [3:0] rsp_mux_002_src_channel;                                            // rsp_mux_002:src_channel -> master_0_master_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                      // rsp_mux_002:src_startofpacket -> master_0_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                        // rsp_mux_002:src_endofpacket -> master_0_master_limiter:rsp_sink_endofpacket
	wire          master_0_master_limiter_rsp_src_valid;                              // master_0_master_limiter:rsp_src_valid -> master_0_master_agent:rp_valid
	wire  [124:0] master_0_master_limiter_rsp_src_data;                               // master_0_master_limiter:rsp_src_data -> master_0_master_agent:rp_data
	wire          master_0_master_limiter_rsp_src_ready;                              // master_0_master_agent:rp_ready -> master_0_master_limiter:rsp_src_ready
	wire    [3:0] master_0_master_limiter_rsp_src_channel;                            // master_0_master_limiter:rsp_src_channel -> master_0_master_agent:rp_channel
	wire          master_0_master_limiter_rsp_src_startofpacket;                      // master_0_master_limiter:rsp_src_startofpacket -> master_0_master_agent:rp_startofpacket
	wire          master_0_master_limiter_rsp_src_endofpacket;                        // master_0_master_limiter:rsp_src_endofpacket -> master_0_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                  // cmd_mux:src_valid -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_src_data;                                                   // cmd_mux:src_data -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                  // jtag_uart_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [3:0] cmd_mux_src_channel;                                                // cmd_mux:src_channel -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                          // cmd_mux:src_startofpacket -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                            // cmd_mux:src_endofpacket -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid;            // jtag_uart_avalon_jtag_slave_burst_adapter:source0_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [124:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_data;             // jtag_uart_avalon_jtag_slave_burst_adapter:source0_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready;            // jtag_uart_avalon_jtag_slave_agent:cp_ready -> jtag_uart_avalon_jtag_slave_burst_adapter:source0_ready
	wire    [3:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel;          // jtag_uart_avalon_jtag_slave_burst_adapter:source0_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket;    // jtag_uart_avalon_jtag_slave_burst_adapter:source0_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket;      // jtag_uart_avalon_jtag_slave_burst_adapter:source0_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                              // cmd_mux_001:src_valid -> pFIR_Testing_0_avalon_slave_0_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_001_src_data;                                               // cmd_mux_001:src_data -> pFIR_Testing_0_avalon_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                              // pFIR_Testing_0_avalon_slave_0_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [3:0] cmd_mux_001_src_channel;                                            // cmd_mux_001:src_channel -> pFIR_Testing_0_avalon_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                      // cmd_mux_001:src_startofpacket -> pFIR_Testing_0_avalon_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                        // cmd_mux_001:src_endofpacket -> pFIR_Testing_0_avalon_slave_0_burst_adapter:sink0_endofpacket
	wire          pfir_testing_0_avalon_slave_0_burst_adapter_source0_valid;          // pFIR_Testing_0_avalon_slave_0_burst_adapter:source0_valid -> pFIR_Testing_0_avalon_slave_0_agent:cp_valid
	wire  [124:0] pfir_testing_0_avalon_slave_0_burst_adapter_source0_data;           // pFIR_Testing_0_avalon_slave_0_burst_adapter:source0_data -> pFIR_Testing_0_avalon_slave_0_agent:cp_data
	wire          pfir_testing_0_avalon_slave_0_burst_adapter_source0_ready;          // pFIR_Testing_0_avalon_slave_0_agent:cp_ready -> pFIR_Testing_0_avalon_slave_0_burst_adapter:source0_ready
	wire    [3:0] pfir_testing_0_avalon_slave_0_burst_adapter_source0_channel;        // pFIR_Testing_0_avalon_slave_0_burst_adapter:source0_channel -> pFIR_Testing_0_avalon_slave_0_agent:cp_channel
	wire          pfir_testing_0_avalon_slave_0_burst_adapter_source0_startofpacket;  // pFIR_Testing_0_avalon_slave_0_burst_adapter:source0_startofpacket -> pFIR_Testing_0_avalon_slave_0_agent:cp_startofpacket
	wire          pfir_testing_0_avalon_slave_0_burst_adapter_source0_endofpacket;    // pFIR_Testing_0_avalon_slave_0_burst_adapter:source0_endofpacket -> pFIR_Testing_0_avalon_slave_0_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                              // cmd_mux_002:src_valid -> pFIR_Testing_0_avalon_slave_1_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_002_src_data;                                               // cmd_mux_002:src_data -> pFIR_Testing_0_avalon_slave_1_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                              // pFIR_Testing_0_avalon_slave_1_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [3:0] cmd_mux_002_src_channel;                                            // cmd_mux_002:src_channel -> pFIR_Testing_0_avalon_slave_1_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                      // cmd_mux_002:src_startofpacket -> pFIR_Testing_0_avalon_slave_1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                        // cmd_mux_002:src_endofpacket -> pFIR_Testing_0_avalon_slave_1_burst_adapter:sink0_endofpacket
	wire          pfir_testing_0_avalon_slave_1_burst_adapter_source0_valid;          // pFIR_Testing_0_avalon_slave_1_burst_adapter:source0_valid -> pFIR_Testing_0_avalon_slave_1_agent:cp_valid
	wire  [124:0] pfir_testing_0_avalon_slave_1_burst_adapter_source0_data;           // pFIR_Testing_0_avalon_slave_1_burst_adapter:source0_data -> pFIR_Testing_0_avalon_slave_1_agent:cp_data
	wire          pfir_testing_0_avalon_slave_1_burst_adapter_source0_ready;          // pFIR_Testing_0_avalon_slave_1_agent:cp_ready -> pFIR_Testing_0_avalon_slave_1_burst_adapter:source0_ready
	wire    [3:0] pfir_testing_0_avalon_slave_1_burst_adapter_source0_channel;        // pFIR_Testing_0_avalon_slave_1_burst_adapter:source0_channel -> pFIR_Testing_0_avalon_slave_1_agent:cp_channel
	wire          pfir_testing_0_avalon_slave_1_burst_adapter_source0_startofpacket;  // pFIR_Testing_0_avalon_slave_1_burst_adapter:source0_startofpacket -> pFIR_Testing_0_avalon_slave_1_agent:cp_startofpacket
	wire          pfir_testing_0_avalon_slave_1_burst_adapter_source0_endofpacket;    // pFIR_Testing_0_avalon_slave_1_burst_adapter:source0_endofpacket -> pFIR_Testing_0_avalon_slave_1_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                              // cmd_mux_003:src_valid -> SystemID_control_slave_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_003_src_data;                                               // cmd_mux_003:src_data -> SystemID_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                              // SystemID_control_slave_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [3:0] cmd_mux_003_src_channel;                                            // cmd_mux_003:src_channel -> SystemID_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                      // cmd_mux_003:src_startofpacket -> SystemID_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                        // cmd_mux_003:src_endofpacket -> SystemID_control_slave_burst_adapter:sink0_endofpacket
	wire          systemid_control_slave_burst_adapter_source0_valid;                 // SystemID_control_slave_burst_adapter:source0_valid -> SystemID_control_slave_agent:cp_valid
	wire  [124:0] systemid_control_slave_burst_adapter_source0_data;                  // SystemID_control_slave_burst_adapter:source0_data -> SystemID_control_slave_agent:cp_data
	wire          systemid_control_slave_burst_adapter_source0_ready;                 // SystemID_control_slave_agent:cp_ready -> SystemID_control_slave_burst_adapter:source0_ready
	wire    [3:0] systemid_control_slave_burst_adapter_source0_channel;               // SystemID_control_slave_burst_adapter:source0_channel -> SystemID_control_slave_agent:cp_channel
	wire          systemid_control_slave_burst_adapter_source0_startofpacket;         // SystemID_control_slave_burst_adapter:source0_startofpacket -> SystemID_control_slave_agent:cp_startofpacket
	wire          systemid_control_slave_burst_adapter_source0_endofpacket;           // SystemID_control_slave_burst_adapter:source0_endofpacket -> SystemID_control_slave_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [124:0] cmd_demux_src0_data;                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [3:0] cmd_demux_src0_channel;                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                               // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [124:0] cmd_demux_src3_data;                                                // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                               // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [3:0] cmd_demux_src3_channel;                                             // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                       // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                         // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                           // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [124:0] cmd_demux_001_src0_data;                                            // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                           // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [3:0] cmd_demux_001_src0_channel;                                         // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                   // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                     // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                           // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [124:0] cmd_demux_001_src3_data;                                            // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                           // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire    [3:0] cmd_demux_001_src3_channel;                                         // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                   // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                     // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                           // cmd_demux_002:src0_valid -> cmd_mux_001:sink2_valid
	wire  [124:0] cmd_demux_002_src0_data;                                            // cmd_demux_002:src0_data -> cmd_mux_001:sink2_data
	wire          cmd_demux_002_src0_ready;                                           // cmd_mux_001:sink2_ready -> cmd_demux_002:src0_ready
	wire    [3:0] cmd_demux_002_src0_channel;                                         // cmd_demux_002:src0_channel -> cmd_mux_001:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                   // cmd_demux_002:src0_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                     // cmd_demux_002:src0_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                           // cmd_demux_002:src1_valid -> cmd_mux_002:sink2_valid
	wire  [124:0] cmd_demux_002_src1_data;                                            // cmd_demux_002:src1_data -> cmd_mux_002:sink2_data
	wire          cmd_demux_002_src1_ready;                                           // cmd_mux_002:sink2_ready -> cmd_demux_002:src1_ready
	wire    [3:0] cmd_demux_002_src1_channel;                                         // cmd_demux_002:src1_channel -> cmd_mux_002:sink2_channel
	wire          cmd_demux_002_src1_startofpacket;                                   // cmd_demux_002:src1_startofpacket -> cmd_mux_002:sink2_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                     // cmd_demux_002:src1_endofpacket -> cmd_mux_002:sink2_endofpacket
	wire          rsp_demux_src0_valid;                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [124:0] rsp_demux_src0_data;                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [3:0] rsp_demux_src0_channel;                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                               // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [124:0] rsp_demux_src1_data;                                                // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                               // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [3:0] rsp_demux_src1_channel;                                             // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                       // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                         // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src2_valid;                                           // rsp_demux_001:src2_valid -> rsp_mux_002:sink0_valid
	wire  [124:0] rsp_demux_001_src2_data;                                            // rsp_demux_001:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_001_src2_ready;                                           // rsp_mux_002:sink0_ready -> rsp_demux_001:src2_ready
	wire    [3:0] rsp_demux_001_src2_channel;                                         // rsp_demux_001:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_001_src2_startofpacket;                                   // rsp_demux_001:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_001_src2_endofpacket;                                     // rsp_demux_001:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_002_src2_valid;                                           // rsp_demux_002:src2_valid -> rsp_mux_002:sink1_valid
	wire  [124:0] rsp_demux_002_src2_data;                                            // rsp_demux_002:src2_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_002_src2_ready;                                           // rsp_mux_002:sink1_ready -> rsp_demux_002:src2_ready
	wire    [3:0] rsp_demux_002_src2_channel;                                         // rsp_demux_002:src2_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_002_src2_startofpacket;                                   // rsp_demux_002:src2_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_002_src2_endofpacket;                                     // rsp_demux_002:src2_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                           // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [124:0] rsp_demux_003_src0_data;                                            // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                           // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [3:0] rsp_demux_003_src0_channel;                                         // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                   // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                     // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                           // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [124:0] rsp_demux_003_src1_data;                                            // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                           // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire    [3:0] rsp_demux_003_src1_channel;                                         // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                   // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                     // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          cmd_demux_src1_valid;                                               // cmd_demux:src1_valid -> crosser:in_valid
	wire  [124:0] cmd_demux_src1_data;                                                // cmd_demux:src1_data -> crosser:in_data
	wire          cmd_demux_src1_ready;                                               // crosser:in_ready -> cmd_demux:src1_ready
	wire    [3:0] cmd_demux_src1_channel;                                             // cmd_demux:src1_channel -> crosser:in_channel
	wire          cmd_demux_src1_startofpacket;                                       // cmd_demux:src1_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                         // cmd_demux:src1_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                  // crosser:out_valid -> cmd_mux_001:sink0_valid
	wire  [124:0] crosser_out_data;                                                   // crosser:out_data -> cmd_mux_001:sink0_data
	wire          crosser_out_ready;                                                  // cmd_mux_001:sink0_ready -> crosser:out_ready
	wire    [3:0] crosser_out_channel;                                                // crosser:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_out_startofpacket;                                          // crosser:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_out_endofpacket;                                            // crosser:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                               // cmd_demux:src2_valid -> crosser_001:in_valid
	wire  [124:0] cmd_demux_src2_data;                                                // cmd_demux:src2_data -> crosser_001:in_data
	wire          cmd_demux_src2_ready;                                               // crosser_001:in_ready -> cmd_demux:src2_ready
	wire    [3:0] cmd_demux_src2_channel;                                             // cmd_demux:src2_channel -> crosser_001:in_channel
	wire          cmd_demux_src2_startofpacket;                                       // cmd_demux:src2_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                         // cmd_demux:src2_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                              // crosser_001:out_valid -> cmd_mux_002:sink0_valid
	wire  [124:0] crosser_001_out_data;                                               // crosser_001:out_data -> cmd_mux_002:sink0_data
	wire          crosser_001_out_ready;                                              // cmd_mux_002:sink0_ready -> crosser_001:out_ready
	wire    [3:0] crosser_001_out_channel;                                            // crosser_001:out_channel -> cmd_mux_002:sink0_channel
	wire          crosser_001_out_startofpacket;                                      // crosser_001:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                        // crosser_001:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                           // cmd_demux_001:src1_valid -> crosser_002:in_valid
	wire  [124:0] cmd_demux_001_src1_data;                                            // cmd_demux_001:src1_data -> crosser_002:in_data
	wire          cmd_demux_001_src1_ready;                                           // crosser_002:in_ready -> cmd_demux_001:src1_ready
	wire    [3:0] cmd_demux_001_src1_channel;                                         // cmd_demux_001:src1_channel -> crosser_002:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                   // cmd_demux_001:src1_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                     // cmd_demux_001:src1_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                              // crosser_002:out_valid -> cmd_mux_001:sink1_valid
	wire  [124:0] crosser_002_out_data;                                               // crosser_002:out_data -> cmd_mux_001:sink1_data
	wire          crosser_002_out_ready;                                              // cmd_mux_001:sink1_ready -> crosser_002:out_ready
	wire    [3:0] crosser_002_out_channel;                                            // crosser_002:out_channel -> cmd_mux_001:sink1_channel
	wire          crosser_002_out_startofpacket;                                      // crosser_002:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          crosser_002_out_endofpacket;                                        // crosser_002:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                           // cmd_demux_001:src2_valid -> crosser_003:in_valid
	wire  [124:0] cmd_demux_001_src2_data;                                            // cmd_demux_001:src2_data -> crosser_003:in_data
	wire          cmd_demux_001_src2_ready;                                           // crosser_003:in_ready -> cmd_demux_001:src2_ready
	wire    [3:0] cmd_demux_001_src2_channel;                                         // cmd_demux_001:src2_channel -> crosser_003:in_channel
	wire          cmd_demux_001_src2_startofpacket;                                   // cmd_demux_001:src2_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                     // cmd_demux_001:src2_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                              // crosser_003:out_valid -> cmd_mux_002:sink1_valid
	wire  [124:0] crosser_003_out_data;                                               // crosser_003:out_data -> cmd_mux_002:sink1_data
	wire          crosser_003_out_ready;                                              // cmd_mux_002:sink1_ready -> crosser_003:out_ready
	wire    [3:0] crosser_003_out_channel;                                            // crosser_003:out_channel -> cmd_mux_002:sink1_channel
	wire          crosser_003_out_startofpacket;                                      // crosser_003:out_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          crosser_003_out_endofpacket;                                        // crosser_003:out_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          rsp_demux_001_src0_valid;                                           // rsp_demux_001:src0_valid -> crosser_004:in_valid
	wire  [124:0] rsp_demux_001_src0_data;                                            // rsp_demux_001:src0_data -> crosser_004:in_data
	wire          rsp_demux_001_src0_ready;                                           // crosser_004:in_ready -> rsp_demux_001:src0_ready
	wire    [3:0] rsp_demux_001_src0_channel;                                         // rsp_demux_001:src0_channel -> crosser_004:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                   // rsp_demux_001:src0_startofpacket -> crosser_004:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                     // rsp_demux_001:src0_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                              // crosser_004:out_valid -> rsp_mux:sink1_valid
	wire  [124:0] crosser_004_out_data;                                               // crosser_004:out_data -> rsp_mux:sink1_data
	wire          crosser_004_out_ready;                                              // rsp_mux:sink1_ready -> crosser_004:out_ready
	wire    [3:0] crosser_004_out_channel;                                            // crosser_004:out_channel -> rsp_mux:sink1_channel
	wire          crosser_004_out_startofpacket;                                      // crosser_004:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_004_out_endofpacket;                                        // crosser_004:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                           // rsp_demux_001:src1_valid -> crosser_005:in_valid
	wire  [124:0] rsp_demux_001_src1_data;                                            // rsp_demux_001:src1_data -> crosser_005:in_data
	wire          rsp_demux_001_src1_ready;                                           // crosser_005:in_ready -> rsp_demux_001:src1_ready
	wire    [3:0] rsp_demux_001_src1_channel;                                         // rsp_demux_001:src1_channel -> crosser_005:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                   // rsp_demux_001:src1_startofpacket -> crosser_005:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                     // rsp_demux_001:src1_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                              // crosser_005:out_valid -> rsp_mux_001:sink1_valid
	wire  [124:0] crosser_005_out_data;                                               // crosser_005:out_data -> rsp_mux_001:sink1_data
	wire          crosser_005_out_ready;                                              // rsp_mux_001:sink1_ready -> crosser_005:out_ready
	wire    [3:0] crosser_005_out_channel;                                            // crosser_005:out_channel -> rsp_mux_001:sink1_channel
	wire          crosser_005_out_startofpacket;                                      // crosser_005:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          crosser_005_out_endofpacket;                                        // crosser_005:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                           // rsp_demux_002:src0_valid -> crosser_006:in_valid
	wire  [124:0] rsp_demux_002_src0_data;                                            // rsp_demux_002:src0_data -> crosser_006:in_data
	wire          rsp_demux_002_src0_ready;                                           // crosser_006:in_ready -> rsp_demux_002:src0_ready
	wire    [3:0] rsp_demux_002_src0_channel;                                         // rsp_demux_002:src0_channel -> crosser_006:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                   // rsp_demux_002:src0_startofpacket -> crosser_006:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                     // rsp_demux_002:src0_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                              // crosser_006:out_valid -> rsp_mux:sink2_valid
	wire  [124:0] crosser_006_out_data;                                               // crosser_006:out_data -> rsp_mux:sink2_data
	wire          crosser_006_out_ready;                                              // rsp_mux:sink2_ready -> crosser_006:out_ready
	wire    [3:0] crosser_006_out_channel;                                            // crosser_006:out_channel -> rsp_mux:sink2_channel
	wire          crosser_006_out_startofpacket;                                      // crosser_006:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          crosser_006_out_endofpacket;                                        // crosser_006:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                           // rsp_demux_002:src1_valid -> crosser_007:in_valid
	wire  [124:0] rsp_demux_002_src1_data;                                            // rsp_demux_002:src1_data -> crosser_007:in_data
	wire          rsp_demux_002_src1_ready;                                           // crosser_007:in_ready -> rsp_demux_002:src1_ready
	wire    [3:0] rsp_demux_002_src1_channel;                                         // rsp_demux_002:src1_channel -> crosser_007:in_channel
	wire          rsp_demux_002_src1_startofpacket;                                   // rsp_demux_002:src1_startofpacket -> crosser_007:in_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                     // rsp_demux_002:src1_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                              // crosser_007:out_valid -> rsp_mux_001:sink2_valid
	wire  [124:0] crosser_007_out_data;                                               // crosser_007:out_data -> rsp_mux_001:sink2_data
	wire          crosser_007_out_ready;                                              // rsp_mux_001:sink2_ready -> crosser_007:out_ready
	wire    [3:0] crosser_007_out_channel;                                            // crosser_007:out_channel -> rsp_mux_001:sink2_channel
	wire          crosser_007_out_startofpacket;                                      // crosser_007:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          crosser_007_out_endofpacket;                                        // crosser_007:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire    [3:0] hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                    // hps_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [3:0] hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                    // hps_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire    [3:0] master_0_master_limiter_cmd_valid_data;                             // master_0_master_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid;             // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data;              // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready;             // avalon_st_adapter:in_0_ready -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                      // avalon_st_adapter:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                       // avalon_st_adapter:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                      // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                      // avalon_st_adapter:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          pfir_testing_0_avalon_slave_0_agent_rdata_fifo_out_valid;           // pFIR_Testing_0_avalon_slave_0_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] pfir_testing_0_avalon_slave_0_agent_rdata_fifo_out_data;            // pFIR_Testing_0_avalon_slave_0_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          pfir_testing_0_avalon_slave_0_agent_rdata_fifo_out_ready;           // avalon_st_adapter_001:in_0_ready -> pFIR_Testing_0_avalon_slave_0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                  // avalon_st_adapter_001:out_0_valid -> pFIR_Testing_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                   // avalon_st_adapter_001:out_0_data -> pFIR_Testing_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                  // pFIR_Testing_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                  // avalon_st_adapter_001:out_0_error -> pFIR_Testing_0_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          pfir_testing_0_avalon_slave_1_agent_rdata_fifo_out_valid;           // pFIR_Testing_0_avalon_slave_1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] pfir_testing_0_avalon_slave_1_agent_rdata_fifo_out_data;            // pFIR_Testing_0_avalon_slave_1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          pfir_testing_0_avalon_slave_1_agent_rdata_fifo_out_ready;           // avalon_st_adapter_002:in_0_ready -> pFIR_Testing_0_avalon_slave_1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                  // avalon_st_adapter_002:out_0_valid -> pFIR_Testing_0_avalon_slave_1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                   // avalon_st_adapter_002:out_0_data -> pFIR_Testing_0_avalon_slave_1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                  // pFIR_Testing_0_avalon_slave_1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                  // avalon_st_adapter_002:out_0_error -> pFIR_Testing_0_avalon_slave_1_agent:rdata_fifo_sink_error
	wire          systemid_control_slave_agent_rdata_fifo_out_valid;                  // SystemID_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] systemid_control_slave_agent_rdata_fifo_out_data;                   // SystemID_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          systemid_control_slave_agent_rdata_fifo_out_ready;                  // avalon_st_adapter_003:in_0_ready -> SystemID_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                  // avalon_st_adapter_003:out_0_valid -> SystemID_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                   // avalon_st_adapter_003:out_0_data -> SystemID_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                  // SystemID_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                  // avalon_st_adapter_003:out_0_error -> SystemID_control_slave_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) master_0_master_translator (
		.clk                    (PLL_using_AD1939_MCLK_outclk0_clk),                                  //                       clk.clk
		.reset                  (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),                   //                     reset.reset
		.uav_address            (master_0_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (master_0_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (master_0_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (master_0_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (master_0_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (master_0_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (master_0_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (master_0_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (master_0_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (master_0_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (master_0_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (master_0_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (master_0_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (master_0_master_byteenable),                                         //                          .byteenable
		.av_read                (master_0_master_read),                                               //                          .read
		.av_readdata            (master_0_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (master_0_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (master_0_master_write),                                              //                          .write
		.av_writedata           (master_0_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clk_hps_clk_clk),                                    //                      clk.clk
		.reset                  (jtag_uart_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pfir_testing_0_avalon_slave_0_translator (
		.clk                    (PLL_using_AD1939_MCLK_outclk0_clk),                    //                      clk.clk
		.reset                  (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (pfir_testing_0_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pfir_testing_0_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pfir_testing_0_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (pfir_testing_0_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (pfir_testing_0_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pfir_testing_0_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pfir_testing_0_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pfir_testing_0_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pfir_testing_0_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pfir_testing_0_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pfir_testing_0_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (pFIR_Testing_0_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (pFIR_Testing_0_avalon_slave_0_write),                  //                         .write
		.av_read                (pFIR_Testing_0_avalon_slave_0_read),                   //                         .read
		.av_readdata            (pFIR_Testing_0_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (pFIR_Testing_0_avalon_slave_0_writedata),              //                         .writedata
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pfir_testing_0_avalon_slave_1_translator (
		.clk                    (PLL_using_AD1939_MCLK_outclk0_clk),                    //                      clk.clk
		.reset                  (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (pfir_testing_0_avalon_slave_1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pfir_testing_0_avalon_slave_1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pfir_testing_0_avalon_slave_1_agent_m0_read),          //                         .read
		.uav_write              (pfir_testing_0_avalon_slave_1_agent_m0_write),         //                         .write
		.uav_waitrequest        (pfir_testing_0_avalon_slave_1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pfir_testing_0_avalon_slave_1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pfir_testing_0_avalon_slave_1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pfir_testing_0_avalon_slave_1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pfir_testing_0_avalon_slave_1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pfir_testing_0_avalon_slave_1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pfir_testing_0_avalon_slave_1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (pFIR_Testing_0_avalon_slave_1_address),                //      avalon_anti_slave_0.address
		.av_write               (pFIR_Testing_0_avalon_slave_1_write),                  //                         .write
		.av_read                (pFIR_Testing_0_avalon_slave_1_read),                   //                         .read
		.av_readdata            (pFIR_Testing_0_avalon_slave_1_readdata),               //                         .readdata
		.av_writedata           (pFIR_Testing_0_avalon_slave_1_writedata),              //                         .writedata
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) systemid_control_slave_translator (
		.clk                    (clk_hps_clk_clk),                               //                      clk.clk
		.reset                  (SystemID_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (systemid_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (systemid_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (systemid_control_slave_agent_m0_read),          //                         .read
		.uav_write              (systemid_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (systemid_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (systemid_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (systemid_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (systemid_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (systemid_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (systemid_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (systemid_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (SystemID_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (SystemID_control_slave_readdata),               //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (95),
		.PKT_CACHE_H               (119),
		.PKT_CACHE_L               (116),
		.PKT_ADDR_SIDEBAND_H       (93),
		.PKT_ADDR_SIDEBAND_L       (93),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (99),
		.PKT_THREAD_ID_H           (112),
		.PKT_THREAD_ID_L           (101),
		.PKT_QOS_L                 (96),
		.PKT_QOS_H                 (96),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_DATA_SIDEBAND_H       (94),
		.PKT_DATA_SIDEBAND_L       (94),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (4),
		.ID                        (0)
	) hps_h2f_lw_axi_master_agent (
		.aclk                   (clk_hps_clk_clk),                                                    //              clk.clk
		.aresetn                (~hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (hps_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (hps_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (hps_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (hps_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                               //      (terminated)
		.aruser                 (1'b0),                                                               //      (terminated)
		.awqos                  (4'b0000),                                                            //      (terminated)
		.arqos                  (4'b0000),                                                            //      (terminated)
		.awregion               (4'b0000),                                                            //      (terminated)
		.arregion               (4'b0000),                                                            //      (terminated)
		.wuser                  (1'b0),                                                               //      (terminated)
		.ruser                  (),                                                                   //      (terminated)
		.buser                  ()                                                                    //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_QOS_H                 (96),
		.PKT_QOS_L                 (96),
		.PKT_DATA_SIDEBAND_H       (94),
		.PKT_DATA_SIDEBAND_L       (94),
		.PKT_ADDR_SIDEBAND_H       (93),
		.PKT_ADDR_SIDEBAND_L       (93),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_CACHE_H               (119),
		.PKT_CACHE_L               (116),
		.PKT_THREAD_ID_H           (112),
		.PKT_THREAD_ID_L           (101),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (99),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) master_0_master_agent (
		.clk                   (PLL_using_AD1939_MCLK_outclk0_clk),                                  //       clk.clk
		.reset                 (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.av_address            (master_0_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (master_0_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (master_0_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (master_0_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (master_0_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (master_0_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (master_0_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (master_0_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (master_0_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (master_0_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (master_0_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (master_0_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (master_0_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (master_0_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (master_0_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (master_0_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (master_0_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (master_0_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (master_0_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (master_0_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (master_0_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (master_0_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_hps_clk_clk),                                                 //             clk.clk
		.reset                   (jtag_uart_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_hps_clk_clk),                                              //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (clk_hps_clk_clk),                                        //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pfir_testing_0_avalon_slave_0_agent (
		.clk                     (PLL_using_AD1939_MCLK_outclk0_clk),                                 //             clk.clk
		.reset                   (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (pfir_testing_0_avalon_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pfir_testing_0_avalon_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pfir_testing_0_avalon_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pfir_testing_0_avalon_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pfir_testing_0_avalon_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (pfir_testing_0_avalon_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pfir_testing_0_avalon_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pfir_testing_0_avalon_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (pfir_testing_0_avalon_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pfir_testing_0_avalon_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (pfir_testing_0_avalon_slave_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (pfir_testing_0_avalon_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pfir_testing_0_avalon_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (pfir_testing_0_avalon_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (pfir_testing_0_avalon_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (pfir_testing_0_avalon_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pfir_testing_0_avalon_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pfir_testing_0_avalon_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pfir_testing_0_avalon_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pfir_testing_0_avalon_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pfir_testing_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pfir_testing_0_avalon_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pfir_testing_0_avalon_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pfir_testing_0_avalon_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pfir_testing_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pfir_testing_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pfir_testing_0_avalon_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pfir_testing_0_avalon_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pfir_testing_0_avalon_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pfir_testing_0_avalon_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pfir_testing_0_avalon_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pfir_testing_0_avalon_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (pfir_testing_0_avalon_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pfir_testing_0_avalon_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pfir_testing_0_avalon_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pfir_testing_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (PLL_using_AD1939_MCLK_outclk0_clk),                              //       clk.clk
		.reset             (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (pfir_testing_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (pfir_testing_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (pfir_testing_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pfir_testing_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pfir_testing_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pfir_testing_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pfir_testing_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pfir_testing_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pfir_testing_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pfir_testing_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pfir_testing_0_avalon_slave_0_agent_rdata_fifo (
		.clk               (PLL_using_AD1939_MCLK_outclk0_clk),                        //       clk.clk
		.reset             (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (pfir_testing_0_avalon_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (pfir_testing_0_avalon_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (pfir_testing_0_avalon_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (pfir_testing_0_avalon_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (pfir_testing_0_avalon_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (pfir_testing_0_avalon_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pfir_testing_0_avalon_slave_1_agent (
		.clk                     (PLL_using_AD1939_MCLK_outclk0_clk),                                 //             clk.clk
		.reset                   (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (pfir_testing_0_avalon_slave_1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pfir_testing_0_avalon_slave_1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pfir_testing_0_avalon_slave_1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pfir_testing_0_avalon_slave_1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pfir_testing_0_avalon_slave_1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pfir_testing_0_avalon_slave_1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pfir_testing_0_avalon_slave_1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pfir_testing_0_avalon_slave_1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pfir_testing_0_avalon_slave_1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pfir_testing_0_avalon_slave_1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pfir_testing_0_avalon_slave_1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pfir_testing_0_avalon_slave_1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pfir_testing_0_avalon_slave_1_agent_rp_ready),                      //                .ready
		.rp_valid                (pfir_testing_0_avalon_slave_1_agent_rp_valid),                      //                .valid
		.rp_data                 (pfir_testing_0_avalon_slave_1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pfir_testing_0_avalon_slave_1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pfir_testing_0_avalon_slave_1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pfir_testing_0_avalon_slave_1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pfir_testing_0_avalon_slave_1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pfir_testing_0_avalon_slave_1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pfir_testing_0_avalon_slave_1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pfir_testing_0_avalon_slave_1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pfir_testing_0_avalon_slave_1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pfir_testing_0_avalon_slave_1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pfir_testing_0_avalon_slave_1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pfir_testing_0_avalon_slave_1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pfir_testing_0_avalon_slave_1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pfir_testing_0_avalon_slave_1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pfir_testing_0_avalon_slave_1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pfir_testing_0_avalon_slave_1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pfir_testing_0_avalon_slave_1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pfir_testing_0_avalon_slave_1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (pfir_testing_0_avalon_slave_1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pfir_testing_0_avalon_slave_1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pfir_testing_0_avalon_slave_1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pfir_testing_0_avalon_slave_1_agent_rsp_fifo (
		.clk               (PLL_using_AD1939_MCLK_outclk0_clk),                              //       clk.clk
		.reset             (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (pfir_testing_0_avalon_slave_1_agent_rf_source_data),             //        in.data
		.in_valid          (pfir_testing_0_avalon_slave_1_agent_rf_source_valid),            //          .valid
		.in_ready          (pfir_testing_0_avalon_slave_1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pfir_testing_0_avalon_slave_1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pfir_testing_0_avalon_slave_1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pfir_testing_0_avalon_slave_1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pfir_testing_0_avalon_slave_1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pfir_testing_0_avalon_slave_1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pfir_testing_0_avalon_slave_1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pfir_testing_0_avalon_slave_1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pfir_testing_0_avalon_slave_1_agent_rdata_fifo (
		.clk               (PLL_using_AD1939_MCLK_outclk0_clk),                        //       clk.clk
		.reset             (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (pfir_testing_0_avalon_slave_1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (pfir_testing_0_avalon_slave_1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (pfir_testing_0_avalon_slave_1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (pfir_testing_0_avalon_slave_1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (pfir_testing_0_avalon_slave_1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (pfir_testing_0_avalon_slave_1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) systemid_control_slave_agent (
		.clk                     (clk_hps_clk_clk),                                            //             clk.clk
		.reset                   (SystemID_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (systemid_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (systemid_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (systemid_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (systemid_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (systemid_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (systemid_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (systemid_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (systemid_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (systemid_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (systemid_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (systemid_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (systemid_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (systemid_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (systemid_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (systemid_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (systemid_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (systemid_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (systemid_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (systemid_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (systemid_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (systemid_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (systemid_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (systemid_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (systemid_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (systemid_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (systemid_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (systemid_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (systemid_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (systemid_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (systemid_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (systemid_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (systemid_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (systemid_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (systemid_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (systemid_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) systemid_control_slave_agent_rsp_fifo (
		.clk               (clk_hps_clk_clk),                                         //       clk.clk
		.reset             (SystemID_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (systemid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (systemid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (systemid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (systemid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (systemid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (systemid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (systemid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (systemid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (systemid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (systemid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) systemid_control_slave_agent_rdata_fifo (
		.clk               (clk_hps_clk_clk),                                   //       clk.clk
		.reset             (SystemID_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (systemid_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (systemid_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (systemid_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (systemid_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (systemid_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (systemid_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	soc_system_mm_interconnect_1_router router (
		.sink_ready         (hps_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_hps_clk_clk),                                                   //       clk.clk
		.reset              (hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                  //       src.ready
		.src_valid          (router_src_valid),                                                  //          .valid
		.src_data           (router_src_data),                                                   //          .data
		.src_channel        (router_src_channel),                                                //          .channel
		.src_startofpacket  (router_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                             //          .endofpacket
	);

	soc_system_mm_interconnect_1_router router_001 (
		.sink_ready         (hps_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_hps_clk_clk),                                                   //       clk.clk
		.reset              (hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                              //       src.ready
		.src_valid          (router_001_src_valid),                                              //          .valid
		.src_data           (router_001_src_data),                                               //          .data
		.src_channel        (router_001_src_channel),                                            //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                         //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (master_0_master_agent_cp_ready),                   //      sink.ready
		.sink_valid         (master_0_master_agent_cp_valid),                   //          .valid
		.sink_data          (master_0_master_agent_cp_data),                    //          .data
		.sink_startofpacket (master_0_master_agent_cp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (master_0_master_agent_cp_endofpacket),             //          .endofpacket
		.clk                (PLL_using_AD1939_MCLK_outclk0_clk),                //       clk.clk
		.reset              (pFIR_Testing_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                             //       src.ready
		.src_valid          (router_002_src_valid),                             //          .valid
		.src_data           (router_002_src_data),                              //          .data
		.src_channel        (router_002_src_channel),                           //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_003 router_003 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_hps_clk_clk),                                    //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_003_src_ready),                               //       src.ready
		.src_valid          (router_003_src_valid),                               //          .valid
		.src_data           (router_003_src_data),                                //          .data
		.src_channel        (router_003_src_channel),                             //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                          //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_004 router_004 (
		.sink_ready         (pfir_testing_0_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (pfir_testing_0_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (pfir_testing_0_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (pfir_testing_0_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pfir_testing_0_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (PLL_using_AD1939_MCLK_outclk0_clk),                    //       clk.clk
		.reset              (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_004_src_ready),                                 //       src.ready
		.src_valid          (router_004_src_valid),                                 //          .valid
		.src_data           (router_004_src_data),                                  //          .data
		.src_channel        (router_004_src_channel),                               //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_004 router_005 (
		.sink_ready         (pfir_testing_0_avalon_slave_1_agent_rp_ready),         //      sink.ready
		.sink_valid         (pfir_testing_0_avalon_slave_1_agent_rp_valid),         //          .valid
		.sink_data          (pfir_testing_0_avalon_slave_1_agent_rp_data),          //          .data
		.sink_startofpacket (pfir_testing_0_avalon_slave_1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pfir_testing_0_avalon_slave_1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (PLL_using_AD1939_MCLK_outclk0_clk),                    //       clk.clk
		.reset              (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_005_src_ready),                                 //       src.ready
		.src_valid          (router_005_src_valid),                                 //          .valid
		.src_data           (router_005_src_data),                                  //          .data
		.src_channel        (router_005_src_channel),                               //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_003 router_006 (
		.sink_ready         (systemid_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (systemid_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (systemid_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (systemid_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (systemid_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_hps_clk_clk),                               //       clk.clk
		.reset              (SystemID_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_006_src_ready),                          //       src.ready
		.src_valid          (router_006_src_valid),                          //          .valid
		.src_data           (router_006_src_data),                           //          .data
		.src_channel        (router_006_src_channel),                        //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                     //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (99),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (97),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_h2f_lw_axi_master_wr_limiter (
		.clk                    (clk_hps_clk_clk),                                                   //       clk.clk
		.reset                  (hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                  //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                  //          .valid
		.cmd_sink_data          (router_src_data),                                                   //          .data
		.cmd_sink_channel       (router_src_channel),                                                //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                          //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                            //          .endofpacket
		.cmd_src_ready          (hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                 //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                 //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                               //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                  //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                         //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                           //          .endofpacket
		.rsp_src_ready          (hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (99),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (97),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_h2f_lw_axi_master_rd_limiter (
		.clk                    (clk_hps_clk_clk),                                                   //       clk.clk
		.reset                  (hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                              //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                              //          .valid
		.cmd_sink_data          (router_001_src_data),                                               //          .data
		.cmd_sink_channel       (router_001_src_channel),                                            //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                      //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                        //          .endofpacket
		.cmd_src_ready          (hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                             //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                             //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                           //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                              //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                     //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                       //          .endofpacket
		.rsp_src_ready          (hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (99),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (97),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) master_0_master_limiter (
		.clk                    (PLL_using_AD1939_MCLK_outclk0_clk),                //       clk.clk
		.reset                  (pFIR_Testing_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                             //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                             //          .valid
		.cmd_sink_data          (router_002_src_data),                              //          .data
		.cmd_sink_channel       (router_002_src_channel),                           //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                     //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                       //          .endofpacket
		.cmd_src_ready          (master_0_master_limiter_cmd_src_ready),            //   cmd_src.ready
		.cmd_src_data           (master_0_master_limiter_cmd_src_data),             //          .data
		.cmd_src_channel        (master_0_master_limiter_cmd_src_channel),          //          .channel
		.cmd_src_startofpacket  (master_0_master_limiter_cmd_src_startofpacket),    //          .startofpacket
		.cmd_src_endofpacket    (master_0_master_limiter_cmd_src_endofpacket),      //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                            //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                          //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                             //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                      //          .endofpacket
		.rsp_src_ready          (master_0_master_limiter_rsp_src_ready),            //   rsp_src.ready
		.rsp_src_valid          (master_0_master_limiter_rsp_src_valid),            //          .valid
		.rsp_src_data           (master_0_master_limiter_rsp_src_data),             //          .data
		.rsp_src_channel        (master_0_master_limiter_rsp_src_channel),          //          .channel
		.rsp_src_startofpacket  (master_0_master_limiter_rsp_src_startofpacket),    //          .startofpacket
		.rsp_src_endofpacket    (master_0_master_limiter_rsp_src_endofpacket),      //          .endofpacket
		.cmd_src_valid          (master_0_master_limiter_cmd_valid_data)            // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) jtag_uart_avalon_jtag_slave_burst_adapter (
		.clk                   (clk_hps_clk_clk),                                                 //       cr0.clk
		.reset                 (jtag_uart_reset_reset_bridge_in_reset_reset),                     // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                               //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                //          .data
		.sink0_channel         (cmd_mux_src_channel),                                             //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                               //          .ready
		.source0_valid         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pfir_testing_0_avalon_slave_0_burst_adapter (
		.clk                   (PLL_using_AD1939_MCLK_outclk0_clk),                                 //       cr0.clk
		.reset                 (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                             //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                              //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                           //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                       //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                             //          .ready
		.source0_valid         (pfir_testing_0_avalon_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pfir_testing_0_avalon_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (pfir_testing_0_avalon_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pfir_testing_0_avalon_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pfir_testing_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pfir_testing_0_avalon_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pfir_testing_0_avalon_slave_1_burst_adapter (
		.clk                   (PLL_using_AD1939_MCLK_outclk0_clk),                                 //       cr0.clk
		.reset                 (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                             //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                              //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                           //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                       //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                             //          .ready
		.source0_valid         (pfir_testing_0_avalon_slave_1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pfir_testing_0_avalon_slave_1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pfir_testing_0_avalon_slave_1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pfir_testing_0_avalon_slave_1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pfir_testing_0_avalon_slave_1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pfir_testing_0_avalon_slave_1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) systemid_control_slave_burst_adapter (
		.clk                   (clk_hps_clk_clk),                                            //       cr0.clk
		.reset                 (SystemID_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                      //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                       //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                    //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                      //          .ready
		.source0_valid         (systemid_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (systemid_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (systemid_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (systemid_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (systemid_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (systemid_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (clk_hps_clk_clk),                                                   //        clk.clk
		.reset              (hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                              //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                              //           .valid
		.src0_data          (cmd_demux_src0_data),                                               //           .data
		.src0_channel       (cmd_demux_src0_channel),                                            //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                      //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                        //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                              //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                              //           .valid
		.src1_data          (cmd_demux_src1_data),                                               //           .data
		.src1_channel       (cmd_demux_src1_channel),                                            //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                      //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                        //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                              //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                              //           .valid
		.src2_data          (cmd_demux_src2_data),                                               //           .data
		.src2_channel       (cmd_demux_src2_channel),                                            //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                      //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                        //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                              //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                              //           .valid
		.src3_data          (cmd_demux_src3_data),                                               //           .data
		.src3_channel       (cmd_demux_src3_channel),                                            //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                      //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket)                                         //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux cmd_demux_001 (
		.clk                (clk_hps_clk_clk),                                                   //        clk.clk
		.reset              (hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                          //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                          //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                           //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                        //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                  //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                    //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                          //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                          //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                           //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                        //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                  //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                    //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                          //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                          //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                           //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                        //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                                  //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                                    //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                                          //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                                          //           .valid
		.src3_data          (cmd_demux_001_src3_data),                                           //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                                        //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                                  //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket)                                     //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux_002 cmd_demux_002 (
		.clk                (PLL_using_AD1939_MCLK_outclk0_clk),                //        clk.clk
		.reset              (pFIR_Testing_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (master_0_master_limiter_cmd_src_ready),            //       sink.ready
		.sink_channel       (master_0_master_limiter_cmd_src_channel),          //           .channel
		.sink_data          (master_0_master_limiter_cmd_src_data),             //           .data
		.sink_startofpacket (master_0_master_limiter_cmd_src_startofpacket),    //           .startofpacket
		.sink_endofpacket   (master_0_master_limiter_cmd_src_endofpacket),      //           .endofpacket
		.sink_valid         (master_0_master_limiter_cmd_valid_data),           // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                         //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                         //           .valid
		.src0_data          (cmd_demux_002_src0_data),                          //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                       //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                 //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                   //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                         //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                         //           .valid
		.src1_data          (cmd_demux_002_src1_data),                          //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                       //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                 //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)                    //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (clk_hps_clk_clk),                             //       clk.clk
		.reset               (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_src_valid),                           //          .valid
		.src_data            (cmd_mux_src_data),                            //          .data
		.src_channel         (cmd_mux_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                      //          .channel
		.sink0_data          (cmd_demux_src0_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_001 cmd_mux_001 (
		.clk                 (PLL_using_AD1939_MCLK_outclk0_clk),                //       clk.clk
		.reset               (pFIR_Testing_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                            //          .valid
		.src_data            (cmd_mux_001_src_data),                             //          .data
		.src_channel         (cmd_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                //          .valid
		.sink0_channel       (crosser_out_channel),                              //          .channel
		.sink0_data          (crosser_out_data),                                 //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                          //          .endofpacket
		.sink1_ready         (crosser_002_out_ready),                            //     sink1.ready
		.sink1_valid         (crosser_002_out_valid),                            //          .valid
		.sink1_channel       (crosser_002_out_channel),                          //          .channel
		.sink1_data          (crosser_002_out_data),                             //          .data
		.sink1_startofpacket (crosser_002_out_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (crosser_002_out_endofpacket),                      //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                         //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                       //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                          //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_001 cmd_mux_002 (
		.clk                 (PLL_using_AD1939_MCLK_outclk0_clk),                //       clk.clk
		.reset               (pFIR_Testing_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                            //          .valid
		.src_data            (cmd_mux_002_src_data),                             //          .data
		.src_channel         (cmd_mux_002_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                            //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                            //          .valid
		.sink0_channel       (crosser_001_out_channel),                          //          .channel
		.sink0_data          (crosser_001_out_data),                             //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket),                      //          .endofpacket
		.sink1_ready         (crosser_003_out_ready),                            //     sink1.ready
		.sink1_valid         (crosser_003_out_valid),                            //          .valid
		.sink1_channel       (crosser_003_out_channel),                          //          .channel
		.sink1_data          (crosser_003_out_data),                             //          .data
		.sink1_startofpacket (crosser_003_out_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (crosser_003_out_endofpacket),                      //          .endofpacket
		.sink2_ready         (cmd_demux_002_src1_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_002_src1_valid),                         //          .valid
		.sink2_channel       (cmd_demux_002_src1_channel),                       //          .channel
		.sink2_data          (cmd_demux_002_src1_data),                          //          .data
		.sink2_startofpacket (cmd_demux_002_src1_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src1_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_003 (
		.clk                 (clk_hps_clk_clk),                            //       clk.clk
		.reset               (SystemID_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                      //          .valid
		.src_data            (cmd_mux_003_src_data),                       //          .data
		.src_channel         (cmd_mux_003_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                     //          .channel
		.sink0_data          (cmd_demux_src3_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                   //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                 //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                    //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)              //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (clk_hps_clk_clk),                             //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                        //      sink.ready
		.sink_channel       (router_003_src_channel),                      //          .channel
		.sink_data          (router_003_src_data),                         //          .data
		.sink_startofpacket (router_003_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_003_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_src0_data),                         //          .data
		.src0_channel       (rsp_demux_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_src1_data),                         //          .data
		.src1_channel       (rsp_demux_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_001 rsp_demux_001 (
		.clk                (PLL_using_AD1939_MCLK_outclk0_clk),                //       clk.clk
		.reset              (pFIR_Testing_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                             //      sink.ready
		.sink_channel       (router_004_src_channel),                           //          .channel
		.sink_data          (router_004_src_data),                              //          .data
		.sink_startofpacket (router_004_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_004_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_001_src0_data),                          //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_001_src1_data),                          //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_001_src2_data),                          //          .data
		.src2_channel       (rsp_demux_001_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_001 rsp_demux_002 (
		.clk                (PLL_using_AD1939_MCLK_outclk0_clk),                //       clk.clk
		.reset              (pFIR_Testing_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                             //      sink.ready
		.sink_channel       (router_005_src_channel),                           //          .channel
		.sink_data          (router_005_src_data),                              //          .data
		.sink_startofpacket (router_005_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_005_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_002_src0_data),                          //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_002_src1_data),                          //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_002_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_002_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_002_src2_data),                          //          .data
		.src2_channel       (rsp_demux_002_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_002_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_002_src2_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_003 (
		.clk                (clk_hps_clk_clk),                            //       clk.clk
		.reset              (SystemID_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                       //      sink.ready
		.sink_channel       (router_006_src_channel),                     //          .channel
		.sink_data          (router_006_src_data),                        //          .data
		.sink_startofpacket (router_006_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_006_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_003_src0_data),                    //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_003_src1_data),                    //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)              //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (clk_hps_clk_clk),                                                   //       clk.clk
		.reset               (hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                 //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                 //          .valid
		.src_data            (rsp_mux_src_data),                                                  //          .data
		.src_channel         (rsp_mux_src_channel),                                               //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                              //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                              //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                            //          .channel
		.sink0_data          (rsp_demux_src0_data),                                               //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                        //          .endofpacket
		.sink1_ready         (crosser_004_out_ready),                                             //     sink1.ready
		.sink1_valid         (crosser_004_out_valid),                                             //          .valid
		.sink1_channel       (crosser_004_out_channel),                                           //          .channel
		.sink1_data          (crosser_004_out_data),                                              //          .data
		.sink1_startofpacket (crosser_004_out_startofpacket),                                     //          .startofpacket
		.sink1_endofpacket   (crosser_004_out_endofpacket),                                       //          .endofpacket
		.sink2_ready         (crosser_006_out_ready),                                             //     sink2.ready
		.sink2_valid         (crosser_006_out_valid),                                             //          .valid
		.sink2_channel       (crosser_006_out_channel),                                           //          .channel
		.sink2_data          (crosser_006_out_data),                                              //          .data
		.sink2_startofpacket (crosser_006_out_startofpacket),                                     //          .startofpacket
		.sink2_endofpacket   (crosser_006_out_endofpacket),                                       //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                          //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                          //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                        //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                           //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                  //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket)                                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux rsp_mux_001 (
		.clk                 (clk_hps_clk_clk),                                                   //       clk.clk
		.reset               (hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                             //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                             //          .valid
		.src_data            (rsp_mux_001_src_data),                                              //          .data
		.src_channel         (rsp_mux_001_src_channel),                                           //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                       //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                              //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                              //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                            //          .channel
		.sink0_data          (rsp_demux_src1_data),                                               //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                                        //          .endofpacket
		.sink1_ready         (crosser_005_out_ready),                                             //     sink1.ready
		.sink1_valid         (crosser_005_out_valid),                                             //          .valid
		.sink1_channel       (crosser_005_out_channel),                                           //          .channel
		.sink1_data          (crosser_005_out_data),                                              //          .data
		.sink1_startofpacket (crosser_005_out_startofpacket),                                     //          .startofpacket
		.sink1_endofpacket   (crosser_005_out_endofpacket),                                       //          .endofpacket
		.sink2_ready         (crosser_007_out_ready),                                             //     sink2.ready
		.sink2_valid         (crosser_007_out_valid),                                             //          .valid
		.sink2_channel       (crosser_007_out_channel),                                           //          .channel
		.sink2_data          (crosser_007_out_data),                                              //          .data
		.sink2_startofpacket (crosser_007_out_startofpacket),                                     //          .startofpacket
		.sink2_endofpacket   (crosser_007_out_endofpacket),                                       //          .endofpacket
		.sink3_ready         (rsp_demux_003_src1_ready),                                          //     sink3.ready
		.sink3_valid         (rsp_demux_003_src1_valid),                                          //          .valid
		.sink3_channel       (rsp_demux_003_src1_channel),                                        //          .channel
		.sink3_data          (rsp_demux_003_src1_data),                                           //          .data
		.sink3_startofpacket (rsp_demux_003_src1_startofpacket),                                  //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src1_endofpacket)                                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux_002 rsp_mux_002 (
		.clk                 (PLL_using_AD1939_MCLK_outclk0_clk),                //       clk.clk
		.reset               (pFIR_Testing_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                            //          .valid
		.src_data            (rsp_mux_002_src_data),                             //          .data
		.src_channel         (rsp_mux_002_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_001_src2_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_001_src2_valid),                         //          .valid
		.sink0_channel       (rsp_demux_001_src2_channel),                       //          .channel
		.sink0_data          (rsp_demux_001_src2_data),                          //          .data
		.sink0_startofpacket (rsp_demux_001_src2_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src2_endofpacket),                   //          .endofpacket
		.sink1_ready         (rsp_demux_002_src2_ready),                         //     sink1.ready
		.sink1_valid         (rsp_demux_002_src2_valid),                         //          .valid
		.sink1_channel       (rsp_demux_002_src2_channel),                       //          .channel
		.sink1_data          (rsp_demux_002_src2_data),                          //          .data
		.sink1_startofpacket (rsp_demux_002_src2_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src2_endofpacket)                    //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_hps_clk_clk),                                                   //        in_clk.clk
		.in_reset          (hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (PLL_using_AD1939_MCLK_outclk0_clk),                                 //       out_clk.clk
		.out_reset         (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                              //            in.ready
		.in_valid          (cmd_demux_src1_valid),                                              //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                                      //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                                        //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                                            //              .channel
		.in_data           (cmd_demux_src1_data),                                               //              .data
		.out_ready         (crosser_out_ready),                                                 //           out.ready
		.out_valid         (crosser_out_valid),                                                 //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                         //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                           //              .endofpacket
		.out_channel       (crosser_out_channel),                                               //              .channel
		.out_data          (crosser_out_data),                                                  //              .data
		.in_empty          (1'b0),                                                              //   (terminated)
		.in_error          (1'b0),                                                              //   (terminated)
		.out_empty         (),                                                                  //   (terminated)
		.out_error         ()                                                                   //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_hps_clk_clk),                                                   //        in_clk.clk
		.in_reset          (hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (PLL_using_AD1939_MCLK_outclk0_clk),                                 //       out_clk.clk
		.out_reset         (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_src2_ready),                                              //            in.ready
		.in_valid          (cmd_demux_src2_valid),                                              //              .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                                      //              .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                                        //              .endofpacket
		.in_channel        (cmd_demux_src2_channel),                                            //              .channel
		.in_data           (cmd_demux_src2_data),                                               //              .data
		.out_ready         (crosser_001_out_ready),                                             //           out.ready
		.out_valid         (crosser_001_out_valid),                                             //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                     //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                       //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                           //              .channel
		.out_data          (crosser_001_out_data),                                              //              .data
		.in_empty          (1'b0),                                                              //   (terminated)
		.in_error          (1'b0),                                                              //   (terminated)
		.out_empty         (),                                                                  //   (terminated)
		.out_error         ()                                                                   //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_hps_clk_clk),                                                   //        in_clk.clk
		.in_reset          (hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (PLL_using_AD1939_MCLK_outclk0_clk),                                 //       out_clk.clk
		.out_reset         (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                                          //            in.ready
		.in_valid          (cmd_demux_001_src1_valid),                                          //              .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                                  //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                                    //              .endofpacket
		.in_channel        (cmd_demux_001_src1_channel),                                        //              .channel
		.in_data           (cmd_demux_001_src1_data),                                           //              .data
		.out_ready         (crosser_002_out_ready),                                             //           out.ready
		.out_valid         (crosser_002_out_valid),                                             //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                     //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                       //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                           //              .channel
		.out_data          (crosser_002_out_data),                                              //              .data
		.in_empty          (1'b0),                                                              //   (terminated)
		.in_error          (1'b0),                                                              //   (terminated)
		.out_empty         (),                                                                  //   (terminated)
		.out_error         ()                                                                   //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_hps_clk_clk),                                                   //        in_clk.clk
		.in_reset          (hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (PLL_using_AD1939_MCLK_outclk0_clk),                                 //       out_clk.clk
		.out_reset         (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),                                          //            in.ready
		.in_valid          (cmd_demux_001_src2_valid),                                          //              .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),                                  //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),                                    //              .endofpacket
		.in_channel        (cmd_demux_001_src2_channel),                                        //              .channel
		.in_data           (cmd_demux_001_src2_data),                                           //              .data
		.out_ready         (crosser_003_out_ready),                                             //           out.ready
		.out_valid         (crosser_003_out_valid),                                             //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                     //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                       //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                           //              .channel
		.out_data          (crosser_003_out_data),                                              //              .data
		.in_empty          (1'b0),                                                              //   (terminated)
		.in_error          (1'b0),                                                              //   (terminated)
		.out_empty         (),                                                                  //   (terminated)
		.out_error         ()                                                                   //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (PLL_using_AD1939_MCLK_outclk0_clk),                                 //        in_clk.clk
		.in_reset          (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (clk_hps_clk_clk),                                                   //       out_clk.clk
		.out_reset         (hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                          //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                                          //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                                  //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                                    //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                                        //              .channel
		.in_data           (rsp_demux_001_src0_data),                                           //              .data
		.out_ready         (crosser_004_out_ready),                                             //           out.ready
		.out_valid         (crosser_004_out_valid),                                             //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                     //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                       //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                           //              .channel
		.out_data          (crosser_004_out_data),                                              //              .data
		.in_empty          (1'b0),                                                              //   (terminated)
		.in_error          (1'b0),                                                              //   (terminated)
		.out_empty         (),                                                                  //   (terminated)
		.out_error         ()                                                                   //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (PLL_using_AD1939_MCLK_outclk0_clk),                                 //        in_clk.clk
		.in_reset          (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (clk_hps_clk_clk),                                                   //       out_clk.clk
		.out_reset         (hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src1_ready),                                          //            in.ready
		.in_valid          (rsp_demux_001_src1_valid),                                          //              .valid
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),                                  //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),                                    //              .endofpacket
		.in_channel        (rsp_demux_001_src1_channel),                                        //              .channel
		.in_data           (rsp_demux_001_src1_data),                                           //              .data
		.out_ready         (crosser_005_out_ready),                                             //           out.ready
		.out_valid         (crosser_005_out_valid),                                             //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                                     //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                       //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                           //              .channel
		.out_data          (crosser_005_out_data),                                              //              .data
		.in_empty          (1'b0),                                                              //   (terminated)
		.in_error          (1'b0),                                                              //   (terminated)
		.out_empty         (),                                                                  //   (terminated)
		.out_error         ()                                                                   //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (PLL_using_AD1939_MCLK_outclk0_clk),                                 //        in_clk.clk
		.in_reset          (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (clk_hps_clk_clk),                                                   //       out_clk.clk
		.out_reset         (hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                                          //            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                                          //              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                                  //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                                    //              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),                                        //              .channel
		.in_data           (rsp_demux_002_src0_data),                                           //              .data
		.out_ready         (crosser_006_out_ready),                                             //           out.ready
		.out_valid         (crosser_006_out_valid),                                             //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                                     //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                                       //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                           //              .channel
		.out_data          (crosser_006_out_data),                                              //              .data
		.in_empty          (1'b0),                                                              //   (terminated)
		.in_error          (1'b0),                                                              //   (terminated)
		.out_empty         (),                                                                  //   (terminated)
		.out_error         ()                                                                   //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (PLL_using_AD1939_MCLK_outclk0_clk),                                 //        in_clk.clk
		.in_reset          (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (clk_hps_clk_clk),                                                   //       out_clk.clk
		.out_reset         (hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src1_ready),                                          //            in.ready
		.in_valid          (rsp_demux_002_src1_valid),                                          //              .valid
		.in_startofpacket  (rsp_demux_002_src1_startofpacket),                                  //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src1_endofpacket),                                    //              .endofpacket
		.in_channel        (rsp_demux_002_src1_channel),                                        //              .channel
		.in_data           (rsp_demux_002_src1_data),                                           //              .data
		.out_ready         (crosser_007_out_ready),                                             //           out.ready
		.out_valid         (crosser_007_out_valid),                                             //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                                     //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                                       //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                           //              .channel
		.out_data          (crosser_007_out_data),                                              //              .data
		.in_empty          (1'b0),                                                              //   (terminated)
		.in_error          (1'b0),                                                              //   (terminated)
		.out_empty         (),                                                                  //   (terminated)
		.out_error         ()                                                                   //   (terminated)
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_hps_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                           //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (PLL_using_AD1939_MCLK_outclk0_clk),                        // in_clk_0.clk
		.in_rst_0_reset (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (pfir_testing_0_avalon_slave_0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (pfir_testing_0_avalon_slave_0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (pfir_testing_0_avalon_slave_0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (PLL_using_AD1939_MCLK_outclk0_clk),                        // in_clk_0.clk
		.in_rst_0_reset (pFIR_Testing_0_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (pfir_testing_0_avalon_slave_1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (pfir_testing_0_avalon_slave_1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (pfir_testing_0_avalon_slave_1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_hps_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (SystemID_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (systemid_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (systemid_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (systemid_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                  //         .error
	);

endmodule
